// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Database;

namespace Database.Migrations
{
    [DbContext(typeof(ArkadiaDbContext))]
    [Migration("20210411174105_V02_AddRoleInitialHumanBot")]
    partial class V02_AddRoleInitialHumanBot
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "rpg_item_type_enum", new[] { "Weapon", "Shield", "Disposable", "Special" })
                .HasAnnotation("Relational:Collation", "en_US.utf8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Database.Models.Entities.Banner", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("id");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("author_id");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("group");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_banner");

                    b.ToTable("banner");
                });

            modelBuilder.Entity("Database.Models.Entities.Client", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'365184854914236416'::character varying");

                    b.Property<string[]>("GuildBlocklist")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying[]")
                        .HasColumnName("guild_blocklist")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("GuildBoost")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying[]")
                        .HasColumnName("guild_boost")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("UserBlocklist")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying[]")
                        .HasColumnName("user_blocklist")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("UserBoost")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying[]")
                        .HasColumnName("user_boost")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.HasKey("Id")
                        .HasName("pk_client");

                    b.ToTable("client");
                });

            modelBuilder.Entity("Database.Models.Entities.Giveaway", b =>
                {
                    b.Property<string>("GuildId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("guild_id");

                    b.Property<string>("MessageId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("message_id");

                    b.Property<string[]>("AllowedRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("allowed_roles")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ends_at");

                    b.Property<int>("Minimum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("minimum")
                        .HasDefaultValueSql("1");

                    b.Property<int>("MinimumWinners")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("minimum_winners")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("GuildId", "MessageId")
                        .HasName("PK_e73020907ca2a4b1ae14fce6e74");

                    b.ToTable("giveaway");
                });

            modelBuilder.Entity("Database.Models.Entities.Guild", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("id");

                    b.Property<string>("BirthdayChannel")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("birthday.channel");

                    b.Property<string>("BirthdayMessage")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("birthday.message");

                    b.Property<string>("BirthdayRole")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("birthday.role");

                    b.Property<string>("ChannelsAnnouncements")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.announcements");

                    b.Property<string>("ChannelsFarewell")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.farewell");

                    b.Property<string>("ChannelsGreeting")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.greeting");

                    b.Property<string[]>("ChannelsIgnoreAll")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("channels.ignore.all")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("ChannelsIgnoreMessageDelete")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("channels.ignore.message-delete")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("ChannelsIgnoreMessageEdit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("channels.ignore.message-edit")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("ChannelsIgnoreReactionAdd")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("channels.ignore.reaction-add")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string>("ChannelsLogsChannelCreate")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.channel-create");

                    b.Property<string>("ChannelsLogsChannelDelete")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.channel-delete");

                    b.Property<string>("ChannelsLogsChannelUpdate")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.channel-update");

                    b.Property<string>("ChannelsLogsEmojiCreate")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.emoji-create");

                    b.Property<string>("ChannelsLogsEmojiDelete")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.emoji-delete");

                    b.Property<string>("ChannelsLogsEmojiUpdate")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.emoji-update");

                    b.Property<string>("ChannelsLogsImage")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.image");

                    b.Property<string>("ChannelsLogsMember")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.member");

                    b.Property<string>("ChannelsLogsMessage")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.message");

                    b.Property<string>("ChannelsLogsModeration")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.moderation");

                    b.Property<string>("ChannelsLogsNsfwMessage")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.nsfw-message");

                    b.Property<string>("ChannelsLogsPrune")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.prune");

                    b.Property<string>("ChannelsLogsReaction")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.reaction");

                    b.Property<string>("ChannelsLogsRoleCreate")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.role-create");

                    b.Property<string>("ChannelsLogsRoleDelete")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.role-delete");

                    b.Property<string>("ChannelsLogsRoleUpdate")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.role-update");

                    b.Property<string>("ChannelsLogsServerUpdate")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.logs.server-update");

                    b.Property<string>("ChannelsSpam")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channels.spam");

                    b.Property<string>("CommandAutodelete")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("command-auto-delete")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<string>("CustomCommands")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("custom-commands")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<bool>("DisableNaturalPrefix")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("disable-natural-prefix")
                        .HasDefaultValueSql("false");

                    b.Property<string[]>("DisabledChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("disabled-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("DisabledCommands")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(32)[]")
                        .HasColumnName("disabled-commands")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string>("DisabledCommandsChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("disabled-commands-channels")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<bool>("EventsBanAdd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("events.ban-add")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("EventsBanRemove")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("events.ban-remove")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("EventsMemberAdd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("events.member-add")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("EventsMemberNicknameUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("events.member-nickname-update")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("EventsMemberRemove")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("events.member-remove")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("EventsMemberRoleUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("events.member-role-update")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("EventsMemberUsernameUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("events.member-username-update")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("EventsMessageDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("events.message-delete")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("EventsMessageEdit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("events.message-edit")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("EventsTwemojiReactions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("events.twemoji-reactions")
                        .HasDefaultValueSql("false");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("language")
                        .HasDefaultValueSql("'en-US'::character varying");

                    b.Property<bool>("MessagesAnnouncementEmbed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("messages.announcement-embed")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("MessagesAutoDeleteIgnoredAll")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("messages.auto-delete.ignored-all")
                        .HasDefaultValueSql("false");

                    b.Property<string[]>("MessagesAutoDeleteIgnoredChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("messages.auto-delete.ignored-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("MessagesAutoDeleteIgnoredCommands")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(32)[]")
                        .HasColumnName("messages.auto-delete.ignored-commands")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("MessagesAutoDeleteIgnoredRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("messages.auto-delete.ignored-roles")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string>("MessagesFarewell")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("messages.farewell");

                    b.Property<string>("MessagesGreeting")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("messages.greeting");

                    b.Property<string[]>("MessagesIgnoreChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("messages.ignore-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string>("MessagesJoinDm")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("messages.join-dm");

                    b.Property<bool>("MessagesModerationAutoDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("messages.moderation-auto-delete")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("MessagesModerationDm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("messages.moderation-dm")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("MessagesModerationMessageDisplay")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("messages.moderation-message-display")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("MessagesModerationReasonDisplay")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("messages.moderation-reason-display")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("MessagesModeratorNameDisplay")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("messages.moderator-name-display")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("MusicAllowStreams")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("music.allow-streams")
                        .HasDefaultValueSql("true");

                    b.Property<string[]>("MusicAllowedRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("music.allowed-roles")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("MusicAllowedVoiceChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("music.allowed-voice-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<short>("MusicDefaultVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("music.default-volume")
                        .HasDefaultValueSql("100");

                    b.Property<int>("MusicMaximumDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("music.maximum-duration")
                        .HasDefaultValueSql("7200000");

                    b.Property<short>("MusicMaximumEntriesPerUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("music.maximum-entries-per-user")
                        .HasDefaultValueSql("100");

                    b.Property<bool>("NoMentionSpamAlerts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("no-mention-spam.alerts")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("NoMentionSpamEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("no-mention-spam.enabled")
                        .HasDefaultValueSql("false");

                    b.Property<short>("NoMentionSpamMentionsAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("no-mention-spam.mentions-allowed")
                        .HasDefaultValueSql("20");

                    b.Property<int>("NoMentionSpamTimePeriod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("no-mention-spam.time-period")
                        .HasDefaultValueSql("8");

                    b.Property<string>("NotificationsStreamsTwitchStreamers")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("notifications.streams.twitch.streamers")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<string>("PermissionsRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("permissions.roles")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<string>("PermissionsUsers")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("permissions.users")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("prefix")
                        .HasDefaultValueSql("'sd!'::character varying");

                    b.Property<string>("ReactionRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("reaction-roles")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<string[]>("RolesAdmin")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("roles.admin")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string>("RolesAuto")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("roles.auto")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<string[]>("RolesDj")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("roles.dj")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string>("RolesInitial")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("roles.initial");

                    b.Property<string[]>("RolesModerator")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("roles.moderator")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string>("RolesMuted")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("roles.muted");

                    b.Property<string[]>("RolesPublic")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("roles.public")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<bool>("RolesRemoveInitial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("roles.remove-initial")
                        .HasDefaultValueSql("false");

                    b.Property<string>("RolesRestrictedAttachment")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("roles.restricted-attachment");

                    b.Property<string>("RolesRestrictedEmbed")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("roles.restricted-embed");

                    b.Property<string>("RolesRestrictedEmoji")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("roles.restricted-emoji");

                    b.Property<string>("RolesRestrictedReaction")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("roles.restricted-reaction");

                    b.Property<string>("RolesRestrictedVoice")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("roles.restricted-voice");

                    b.Property<string>("RolesSubscriber")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("roles.subscriber");

                    b.Property<string>("RolesUniqueRoleSets")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("roles.unique-role-sets")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<bool>("SelfmodAttachmentsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("selfmod.attachments.enabled")
                        .HasDefaultValueSql("false");

                    b.Property<short>("SelfmodAttachmentsHardAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.attachments.hard-action")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("SelfmodAttachmentsHardActionDuration")
                        .HasColumnType("bigint")
                        .HasColumnName("selfmod.attachments.hard-action-duration");

                    b.Property<string[]>("SelfmodAttachmentsIgnoredChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.attachments.ignored-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("SelfmodAttachmentsIgnoredRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.attachments.ignored-roles")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<short>("SelfmodAttachmentsSoftAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.attachments.soft-action")
                        .HasDefaultValueSql("0");

                    b.Property<int>("SelfmodAttachmentsThresholdDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("selfmod.attachments.threshold-duration")
                        .HasDefaultValueSql("60000");

                    b.Property<short>("SelfmodAttachmentsThresholdMaximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.attachments.threshold-maximum")
                        .HasDefaultValueSql("10");

                    b.Property<bool>("SelfmodCapitalsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("selfmod.capitals.enabled")
                        .HasDefaultValueSql("false");

                    b.Property<short>("SelfmodCapitalsHardAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.capitals.hard-action")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("SelfmodCapitalsHardActionDuration")
                        .HasColumnType("bigint")
                        .HasColumnName("selfmod.capitals.hard-action-duration");

                    b.Property<string[]>("SelfmodCapitalsIgnoredChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.capitals.ignored-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("SelfmodCapitalsIgnoredRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.capitals.ignored-roles")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<short>("SelfmodCapitalsMaximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.capitals.maximum")
                        .HasDefaultValueSql("50");

                    b.Property<short>("SelfmodCapitalsMinimum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.capitals.minimum")
                        .HasDefaultValueSql("15");

                    b.Property<short>("SelfmodCapitalsSoftAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.capitals.soft-action")
                        .HasDefaultValueSql("0");

                    b.Property<int>("SelfmodCapitalsThresholdDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("selfmod.capitals.threshold-duration")
                        .HasDefaultValueSql("60000");

                    b.Property<short>("SelfmodCapitalsThresholdMaximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.capitals.threshold-maximum")
                        .HasDefaultValueSql("10");

                    b.Property<bool>("SelfmodFilterEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("selfmod.filter.enabled")
                        .HasDefaultValueSql("false");

                    b.Property<short>("SelfmodFilterHardAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.filter.hard-action")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("SelfmodFilterHardActionDuration")
                        .HasColumnType("bigint")
                        .HasColumnName("selfmod.filter.hard-action-duration");

                    b.Property<string[]>("SelfmodFilterIgnoredChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.filter.ignored-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("SelfmodFilterIgnoredRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.filter.ignored-roles")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("SelfmodFilterRaw")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(32)[]")
                        .HasColumnName("selfmod.filter.raw")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<short>("SelfmodFilterSoftAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.filter.soft-action")
                        .HasDefaultValueSql("0");

                    b.Property<int>("SelfmodFilterThresholdDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("selfmod.filter.threshold-duration")
                        .HasDefaultValueSql("60000");

                    b.Property<short>("SelfmodFilterThresholdMaximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.filter.threshold-maximum")
                        .HasDefaultValueSql("10");

                    b.Property<string[]>("SelfmodIgnoreChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.ignored-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<bool>("SelfmodInvitesEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("selfmod.invites.enabled");

                    b.Property<short>("SelfmodInvitesHardAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("selfmod.invites.hard-action");

                    b.Property<long?>("SelfmodInvitesHardActionDuration")
                        .HasColumnType("bigint")
                        .HasColumnName("selfmod.invites.hard-action-duration");

                    b.Property<string[]>("SelfmodInvitesIgnoredChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.invites.ignored-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("SelfmodInvitesIgnoredCodes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying[]")
                        .HasColumnName("selfmod.invites.ignored-codes")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("SelfmodInvitesIgnoredGuilds")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.invites.ignored-guilds")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("SelfmodInvitesIgnoredRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.invites.ignored-roles")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<short>("SelfmodInvitesSoftAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("selfmod.invites.soft-action");

                    b.Property<int>("SelfmodInvitesThresholdDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("selfmod.invites.threshold-duration")
                        .HasDefaultValueSql("60000");

                    b.Property<short>("SelfmodInvitesThresholdMaximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.invites.threshold-maximum")
                        .HasDefaultValueSql("10");

                    b.Property<string[]>("SelfmodLinksAllowed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(128)[]")
                        .HasColumnName("selfmod.links.allowed")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<bool>("SelfmodLinksEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("selfmod.links.enabled")
                        .HasDefaultValueSql("false");

                    b.Property<short>("SelfmodLinksHardAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.links.hard-action")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("SelfmodLinksHardActionDuration")
                        .HasColumnType("bigint")
                        .HasColumnName("selfmod.links.hard-action-duration");

                    b.Property<string[]>("SelfmodLinksIgnoredChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.links.ignored-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("SelfmodLinksIgnoredRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.links.ignored-roles")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<short>("SelfmodLinksSoftAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.links.soft-action")
                        .HasDefaultValueSql("0");

                    b.Property<int>("SelfmodLinksThresholdDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("selfmod.links.threshold-duration")
                        .HasDefaultValueSql("60000");

                    b.Property<short>("SelfmodLinksThresholdMaximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.links.threshold-maximum")
                        .HasDefaultValueSql("10");

                    b.Property<bool>("SelfmodMessagesEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("selfmod.messages.enabled")
                        .HasDefaultValueSql("false");

                    b.Property<short>("SelfmodMessagesHardAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.messages.hard-action")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("SelfmodMessagesHardActionDuration")
                        .HasColumnType("bigint")
                        .HasColumnName("selfmod.messages.hard-action-duration");

                    b.Property<string[]>("SelfmodMessagesIgnoredChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.messages.ignored-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("SelfmodMessagesIgnoredRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.messages.ignored-roles")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<short>("SelfmodMessagesMaximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.messages.maximum")
                        .HasDefaultValueSql("5");

                    b.Property<short>("SelfmodMessagesQueueSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.messages.queue-size")
                        .HasDefaultValueSql("50");

                    b.Property<short>("SelfmodMessagesSoftAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.messages.soft-action")
                        .HasDefaultValueSql("0");

                    b.Property<int>("SelfmodMessagesThresholdDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("selfmod.messages.threshold-duration")
                        .HasDefaultValueSql("60000");

                    b.Property<short>("SelfmodMessagesThresholdMaximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.messages.threshold-maximum")
                        .HasDefaultValueSql("10");

                    b.Property<bool>("SelfmodNewlinesEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("selfmod.newlines.enabled")
                        .HasDefaultValueSql("false");

                    b.Property<short>("SelfmodNewlinesHardAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.newlines.hard-action")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("SelfmodNewlinesHardActionDuration")
                        .HasColumnType("bigint")
                        .HasColumnName("selfmod.newlines.hard-action-duration");

                    b.Property<string[]>("SelfmodNewlinesIgnoredChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.newlines.ignored-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("SelfmodNewlinesIgnoredRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.newlines.ignored-roles")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<short>("SelfmodNewlinesMaximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.newlines.maximum")
                        .HasDefaultValueSql("20");

                    b.Property<short>("SelfmodNewlinesSoftAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.newlines.soft-action")
                        .HasDefaultValueSql("0");

                    b.Property<int>("SelfmodNewlinesThresholdDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("selfmod.newlines.threshold-duration")
                        .HasDefaultValueSql("60000");

                    b.Property<short>("SelfmodNewlinesThresholdMaximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.newlines.threshold-maximum")
                        .HasDefaultValueSql("10");

                    b.Property<string[]>("SelfmodReactionsAllowed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(128)[]")
                        .HasColumnName("selfmod.reactions.allowed")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("SelfmodReactionsBlocked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(128)[]")
                        .HasColumnName("selfmod.reactions.blocked")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<bool>("SelfmodReactionsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("selfmod.reactions.enabled")
                        .HasDefaultValueSql("false");

                    b.Property<short>("SelfmodReactionsHardAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.reactions.hard-action")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("SelfmodReactionsHardActionDuration")
                        .HasColumnType("bigint")
                        .HasColumnName("selfmod.reactions.hard-action-duration");

                    b.Property<string[]>("SelfmodReactionsIgnoredChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.reactions.ignored-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("SelfmodReactionsIgnoredRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("selfmod.reactions.ignored-roles")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<short>("SelfmodReactionsMaximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.reactions.maximum")
                        .HasDefaultValueSql("10");

                    b.Property<short>("SelfmodReactionsSoftAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.reactions.soft-action")
                        .HasDefaultValueSql("0");

                    b.Property<int>("SelfmodReactionsThresholdDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("selfmod.reactions.threshold-duration")
                        .HasDefaultValueSql("60000");

                    b.Property<short>("SelfmodReactionsThresholdMaximum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("selfmod.reactions.threshold-maximum")
                        .HasDefaultValueSql("10");

                    b.Property<bool>("SocialAchieve")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("social.achieve")
                        .HasDefaultValueSql("false");

                    b.Property<string>("SocialAchieveMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("social.achieve-message");

                    b.Property<bool?>("SocialEnabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("social.enabled")
                        .HasDefaultValueSql("true");

                    b.Property<string[]>("SocialIgnoredChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("social.ignored-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string[]>("SocialIgnoredRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("social.ignored-roles")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<decimal>("SocialMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(53)
                        .HasColumnType("numeric(53)")
                        .HasColumnName("social.multiplier")
                        .HasDefaultValueSql("1");

                    b.Property<string>("StarboardChannel")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("starboard.channel");

                    b.Property<string>("StarboardEmoji")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("starboard.emoji")
                        .HasDefaultValueSql("'%E2%AD%90'::character varying");

                    b.Property<string[]>("StarboardIgnoreChannels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("starboard.ignored-channels")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<long?>("StarboardMaximumAge")
                        .HasColumnType("bigint")
                        .HasColumnName("starboard.maximum-age");

                    b.Property<short>("StarboardMinimum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("starboard.minimum")
                        .HasDefaultValueSql("1");

                    b.Property<bool>("StarboardSelfStar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("starboard.self-star")
                        .HasDefaultValueSql("false");

                    b.Property<string>("StickyRoles")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("sticky-roles")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<string>("SuggestionsChannel")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("suggestions.channel");

                    b.Property<string>("SuggestionsEmojisDownvote")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("suggestions.emojis.downvote")
                        .HasDefaultValueSql("':ArrowB:694594285269680179'::character varying");

                    b.Property<string>("SuggestionsEmojisUpvote")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("suggestions.emojis.upvote")
                        .HasDefaultValueSql("':ArrowT:694594285487652954'::character varying");

                    b.Property<bool>("SuggestionsOnActionDm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("suggestions.on-action.dm")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("SuggestionsOnActionHideAuthor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("suggestions.on-action.hide-author")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("SuggestionsOnActionRepost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("suggestions.on-action.repost")
                        .HasDefaultValueSql("false");

                    b.Property<string>("TriggerAlias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("trigger.alias")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<string>("TriggerIncludes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("trigger.includes")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<string>("rolesInitialBots")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("roles.initial-bots");

                    b.Property<string>("rolesInitialHumans")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("roles.initial-humans");

                    b.HasKey("Id")
                        .HasName("pk_guilds");

                    b.ToTable("guilds");
                });

            modelBuilder.Entity("Database.Models.Entities.Member", b =>
                {
                    b.Property<string>("GuildId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("guild_id");

                    b.Property<string>("UserId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("user_id");

                    b.Property<long>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("points")
                        .HasDefaultValueSql("0");

                    b.HasKey("GuildId", "UserId")
                        .HasName("PK_923cd70108499f5f72ae286417c");

                    b.ToTable("member");
                });

            modelBuilder.Entity("Database.Models.Entities.Migration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_migrations");

                    b.ToTable("migrations");
                });

            modelBuilder.Entity("Database.Models.Entities.Moderation", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("integer")
                        .HasColumnName("case_id");

                    b.Property<string>("GuildId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("guild_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("Duration")
                        .HasColumnType("bigint")
                        .HasColumnName("duration");

                    b.Property<string>("ExtraData")
                        .HasColumnType("json")
                        .HasColumnName("extra_data");

                    b.Property<string>("ImageUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("image_url")
                        .HasDefaultValueSql("NULL::character varying");

                    b.Property<string>("ModeratorId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("moderator_id")
                        .HasDefaultValueSql("'365184854914236416'::character varying");

                    b.Property<string>("Reason")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("reason")
                        .HasDefaultValueSql("NULL::character varying");

                    b.Property<short>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("NULL::character varying");

                    b.HasKey("CaseId", "GuildId")
                        .HasName("PK_e9ec6c684894a7067a45b7ae4f6");

                    b.ToTable("moderation");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgBattle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("ChallengedCooldown")
                        .HasColumnType("smallint")
                        .HasColumnName("challenged_cooldown");

                    b.Property<string>("ChallengedEffects")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("challenged_effects");

                    b.Property<int>("ChallengedEnergy")
                        .HasColumnType("integer")
                        .HasColumnName("challenged_energy");

                    b.Property<int>("ChallengedHealth")
                        .HasColumnType("integer")
                        .HasColumnName("challenged_health");

                    b.Property<string>("ChallengedUser")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("challenged_user");

                    b.Property<long?>("ChallengedWeaponId")
                        .HasColumnType("bigint")
                        .HasColumnName("challenged_weapon_id");

                    b.Property<short>("ChallengerCooldown")
                        .HasColumnType("smallint")
                        .HasColumnName("challenger_cooldown");

                    b.Property<string>("ChallengerEffects")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("challenger_effects");

                    b.Property<int>("ChallengerEnergy")
                        .HasColumnType("integer")
                        .HasColumnName("challenger_energy");

                    b.Property<int>("ChallengerHealth")
                        .HasColumnType("integer")
                        .HasColumnName("challenger_health");

                    b.Property<bool>("ChallengerTurn")
                        .HasColumnType("boolean")
                        .HasColumnName("challenger_turn");

                    b.Property<string>("ChallengerUser")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("challenger_user");

                    b.Property<long?>("ChallengerWeaponId")
                        .HasColumnType("bigint")
                        .HasColumnName("challenger_weapon_id");

                    b.HasKey("Id")
                        .HasName("pk_rpg_battle");

                    b.HasIndex("ChallengedWeaponId")
                        .HasDatabaseName("ix_rpg_battle_challenged_weapon_id");

                    b.HasIndex("ChallengerWeaponId")
                        .HasDatabaseName("ix_rpg_battle_challenger_weapon_id");

                    b.HasIndex(new[] { "ChallengedUser" }, "REL_36e1b3bf944502050aa76aa399")
                        .IsUnique()
                        .HasDatabaseName("ix_rpg_battle_challenged_user");

                    b.HasIndex(new[] { "ChallengerUser" }, "REL_5230797f292df6a36d1fb5f0f0")
                        .IsUnique()
                        .HasDatabaseName("ix_rpg_battle_challenger_user");

                    b.ToTable("rpg_battle");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("AgilityMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("agility_multiplier")
                        .HasDefaultValueSql("1");

                    b.Property<double>("AttackMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("attack_multiplier")
                        .HasDefaultValueSql("1");

                    b.Property<double>("DefenseMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("defense_multiplier")
                        .HasDefaultValueSql("1");

                    b.Property<double>("EnergyMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("energy_multiplier")
                        .HasDefaultValueSql("1");

                    b.Property<double>("LuckMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("luck_multiplier")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_rpg_class");

                    b.HasIndex(new[] { "Name" }, "UQ_c21506119f763eff259ec4a91cd")
                        .IsUnique()
                        .HasDatabaseName("ix_rpg_class_name");

                    b.ToTable("rpg_class");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgGuild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BankLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("bank_limit")
                        .HasDefaultValueSql("50000");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<long>("LoseCount")
                        .HasColumnType("bigint")
                        .HasColumnName("lose_count");

                    b.Property<short>("MemberLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("member_limit")
                        .HasDefaultValueSql("5");

                    b.Property<long>("MoneyCount")
                        .HasColumnType("bigint")
                        .HasColumnName("money_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<short>("Upgrade")
                        .HasColumnType("smallint")
                        .HasColumnName("upgrade");

                    b.Property<long>("WinCount")
                        .HasColumnType("bigint")
                        .HasColumnName("win_count");

                    b.HasKey("Id")
                        .HasName("pk_rpg_guild");

                    b.ToTable("rpg_guild");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgGuildRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("GuildId")
                        .HasColumnType("integer")
                        .HasColumnName("guild_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_rpg_guild_rank");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_rpg_guild_rank_guild_id");

                    b.ToTable("rpg_guild_rank");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("Accuracy")
                        .HasColumnType("smallint")
                        .HasColumnName("accuracy");

                    b.Property<double>("Attack")
                        .HasColumnType("double precision")
                        .HasColumnName("attack");

                    b.Property<double>("Defense")
                        .HasColumnType("double precision")
                        .HasColumnName("defense");

                    b.Property<string>("Effects")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("effects")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<double>("Health")
                        .HasColumnType("double precision")
                        .HasColumnName("health");

                    b.Property<short>("MaximumCooldown")
                        .HasColumnType("smallint")
                        .HasColumnName("maximum_cooldown");

                    b.Property<int>("MaximumDurability")
                        .HasColumnType("integer")
                        .HasColumnName("maximum_durability");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Rarity")
                        .HasColumnType("integer")
                        .HasColumnName("rarity");

                    b.Property<double>("RequiredEnergy")
                        .HasColumnType("double precision")
                        .HasColumnName("required_energy");

                    b.HasKey("Id")
                        .HasName("pk_rpg_item");

                    b.HasIndex(new[] { "Name", "Rarity" }, "IDX_a10f6fa9678ea762b217fd77ba")
                        .IsUnique()
                        .HasDatabaseName("ix_rpg_item_name_rarity");

                    b.ToTable("rpg_item");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("user_id");

                    b.Property<int>("Agility")
                        .HasColumnType("integer")
                        .HasColumnName("agility");

                    b.Property<int>("Attack")
                        .HasColumnType("integer")
                        .HasColumnName("attack");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("class_id");

                    b.Property<int>("CrateCommonCount")
                        .HasColumnType("integer")
                        .HasColumnName("crate_common_count");

                    b.Property<int>("CrateLegendaryCount")
                        .HasColumnType("integer")
                        .HasColumnName("crate_legendary_count");

                    b.Property<int>("CrateRareCount")
                        .HasColumnType("integer")
                        .HasColumnName("crate_rare_count");

                    b.Property<int>("CrateUncommonCount")
                        .HasColumnType("integer")
                        .HasColumnName("crate_uncommon_count");

                    b.Property<long>("DeathCount")
                        .HasColumnType("bigint")
                        .HasColumnName("death_count");

                    b.Property<int>("Energy")
                        .HasColumnType("integer")
                        .HasColumnName("energy");

                    b.Property<long?>("EquippedItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("equipped_item_id");

                    b.Property<int?>("GuildId")
                        .HasColumnType("integer")
                        .HasColumnName("guild_id");

                    b.Property<int?>("GuildRankId")
                        .HasColumnType("integer")
                        .HasColumnName("guild_rank_id");

                    b.Property<int>("Health")
                        .HasColumnType("integer")
                        .HasColumnName("health");

                    b.Property<int>("Luck")
                        .HasColumnType("integer")
                        .HasColumnName("luck");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<long>("WinCount")
                        .HasColumnType("bigint")
                        .HasColumnName("win_count");

                    b.HasKey("UserId")
                        .HasName("PK_719f657879066b0981260ccc7b2");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("ix_rpg_user_class_id");

                    b.HasIndex("EquippedItemId")
                        .HasDatabaseName("ix_rpg_user_equipped_item_id");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_rpg_user_guild_id");

                    b.HasIndex("GuildRankId")
                        .HasDatabaseName("ix_rpg_user_guild_rank_id");

                    b.ToTable("rpg_user");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgUserItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Durability")
                        .HasColumnType("integer")
                        .HasColumnName("durability");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.HasKey("Id")
                        .HasName("pk_rpg_user_item");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_rpg_user_item_item_id");

                    b.ToTable("rpg_user_item");
                });

            modelBuilder.Entity("Database.Models.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("CatchUp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("catch_up")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<string>("Recurring")
                        .HasColumnType("character varying")
                        .HasColumnName("recurring");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("task_id");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("pk_schedule");

                    b.ToTable("schedule");
                });

            modelBuilder.Entity("Database.Models.Entities.Starboard", b =>
                {
                    b.Property<string>("MessageId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("message_id");

                    b.Property<string>("GuildId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("guild_id");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("channel_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("StarMessageId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("star_message_id");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("stars");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("user_id");

                    b.HasKey("MessageId", "GuildId")
                        .HasName("PK_4bd6406cf1cf6cff7e9de1fafd2");

                    b.ToTable("starboard");
                });

            modelBuilder.Entity("Database.Models.Entities.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("GuildId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("guild_id");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("author_id");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("message_id");

                    b.HasKey("Id", "GuildId")
                        .HasName("PK_5a7d999d79058230627a279853a");

                    b.ToTable("suggestion");
                });

            modelBuilder.Entity("Database.Models.Entities.TwitchStreamSubscription", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires_at");

                    b.Property<string[]>("GuildIds")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(19)[]")
                        .HasColumnName("guild_ids")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<bool>("IsStreaming")
                        .HasColumnType("boolean")
                        .HasColumnName("is_streaming");

                    b.HasKey("Id")
                        .HasName("pk_twitch_stream_subscription");

                    b.ToTable("twitch_stream_subscription");
                });

            modelBuilder.Entity("Database.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("id");

                    b.Property<bool?>("ModerationDm")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("moderation_dm")
                        .HasDefaultValueSql("true");

                    b.Property<long>("Money")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("money")
                        .HasDefaultValueSql("0");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("points")
                        .HasDefaultValueSql("0");

                    b.Property<int>("Reputations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reputations")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Database.Models.Entities.UserCooldown", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("Daily")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("daily");

                    b.Property<DateTime?>("Reputation")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reputation");

                    b.HasKey("UserId")
                        .HasName("PK_1950d1f438c5dfe9bc6b8cc3531");

                    b.ToTable("user_cooldown");
                });

            modelBuilder.Entity("Database.Models.Entities.UserGameIntegration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ExtraData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("extra_data");

                    b.Property<string>("Game")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("game");

                    b.Property<string>("UserId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_game_integration");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_game_integration_user_id");

                    b.ToTable("user_game_integration");
                });

            modelBuilder.Entity("Database.Models.Entities.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("user_id");

                    b.Property<string[]>("Badges")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying[]")
                        .HasColumnName("badges")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<string>("BannerLevel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("banner_level")
                        .HasDefaultValueSql("'1001'::character varying");

                    b.Property<string>("BannerProfile")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("banner_profile")
                        .HasDefaultValueSql("'0001'::character varying");

                    b.Property<string[]>("Banners")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying[]")
                        .HasColumnName("banners")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<int>("Color")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("color")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("DarkTheme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("dark_theme")
                        .HasDefaultValueSql("false");

                    b.Property<string[]>("PublicBadges")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying[]")
                        .HasColumnName("public_badges")
                        .HasDefaultValueSql("ARRAY[]::character varying[]");

                    b.Property<long>("Vault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("vault")
                        .HasDefaultValueSql("0");

                    b.HasKey("UserId")
                        .HasName("PK_0468eeca19838d4337cb8f1ec93");

                    b.ToTable("user_profile");
                });

            modelBuilder.Entity("Database.Models.Entities.UserSpousesUser", b =>
                {
                    b.Property<string>("UserId1")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("user_id_1");

                    b.Property<string>("UserId2")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("user_id_2");

                    b.HasKey("UserId1", "UserId2")
                        .HasName("PK_d03519ca87f9a551e7623625f17");

                    b.HasIndex(new[] { "UserId2" }, "IDX_039ee960316593d0e8102ae6c5")
                        .HasDatabaseName("ix_user_spouses_user_user_id_2");

                    b.HasIndex(new[] { "UserId1" }, "IDX_6bbc6de75851eb64e17c07a6a9")
                        .HasDatabaseName("ix_user_spouses_user_user_id_1");

                    b.ToTable("user_spouses_user");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgBattle", b =>
                {
                    b.HasOne("Database.Models.Entities.RpgUser", "ChallengedUserNavigation")
                        .WithOne("RpgBattleChallengedUserNavigation")
                        .HasForeignKey("Database.Models.Entities.RpgBattle", "ChallengedUser")
                        .HasConstraintName("FK_36e1b3bf944502050aa76aa399a")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.Entities.RpgUserItem", "ChallengedWeapon")
                        .WithMany("RpgBattleChallengedWeapons")
                        .HasForeignKey("ChallengedWeaponId")
                        .HasConstraintName("FK_44cf95cf9e6634b2f87f8159477")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Database.Models.Entities.RpgUser", "ChallengerUserNavigation")
                        .WithOne("RpgBattleChallengerUserNavigation")
                        .HasForeignKey("Database.Models.Entities.RpgBattle", "ChallengerUser")
                        .HasConstraintName("FK_5230797f292df6a36d1fb5f0f09")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.Entities.RpgUserItem", "ChallengerWeapon")
                        .WithMany("RpgBattleChallengerWeapons")
                        .HasForeignKey("ChallengerWeaponId")
                        .HasConstraintName("FK_e3997bc3dd2ed9164b7a1a85f02")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ChallengedUserNavigation");

                    b.Navigation("ChallengedWeapon");

                    b.Navigation("ChallengerUserNavigation");

                    b.Navigation("ChallengerWeapon");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgGuildRank", b =>
                {
                    b.HasOne("Database.Models.Entities.RpgGuild", "Guild")
                        .WithMany("RpgGuildRanks")
                        .HasForeignKey("GuildId")
                        .HasConstraintName("FK_ddc84b6edbf93fd59d9cc819bd0")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgUser", b =>
                {
                    b.HasOne("Database.Models.Entities.RpgClass", "Class")
                        .WithMany("RpgUsers")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_a925752b2be93dab947e57f17b2")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Database.Models.Entities.RpgUserItem", "EquippedItem")
                        .WithMany("RpgUsers")
                        .HasForeignKey("EquippedItemId")
                        .HasConstraintName("FK_fdd476ddaed81357d7ddbdca883")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Database.Models.Entities.RpgGuild", "Guild")
                        .WithMany("RpgUsers")
                        .HasForeignKey("GuildId")
                        .HasConstraintName("FK_776e8e9d0df635e6be8b40c3507")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Database.Models.Entities.RpgGuildRank", "GuildRank")
                        .WithMany("RpgUsers")
                        .HasForeignKey("GuildRankId")
                        .HasConstraintName("FK_6fd419cf9dad38d6b37c244b172")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Database.Models.Entities.User", "User")
                        .WithOne("RpgUser")
                        .HasForeignKey("Database.Models.Entities.RpgUser", "UserId")
                        .HasConstraintName("FK_719f657879066b0981260ccc7b2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("EquippedItem");

                    b.Navigation("Guild");

                    b.Navigation("GuildRank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgUserItem", b =>
                {
                    b.HasOne("Database.Models.Entities.RpgItem", "Item")
                        .WithMany("RpgUserItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_0babac6e86746fb7ab492f6d948")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Database.Models.Entities.UserCooldown", b =>
                {
                    b.HasOne("Database.Models.Entities.User", "User")
                        .WithOne("UserCooldown")
                        .HasForeignKey("Database.Models.Entities.UserCooldown", "UserId")
                        .HasConstraintName("FK_1950d1f438c5dfe9bc6b8cc3531")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Models.Entities.UserGameIntegration", b =>
                {
                    b.HasOne("Database.Models.Entities.User", "User")
                        .WithMany("UserGameIntegrations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_06e1223a9d5945e11f022e6a1c6")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Models.Entities.UserProfile", b =>
                {
                    b.HasOne("Database.Models.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Database.Models.Entities.UserProfile", "UserId")
                        .HasConstraintName("FK_0468eeca19838d4337cb8f1ec93")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Models.Entities.UserSpousesUser", b =>
                {
                    b.HasOne("Database.Models.Entities.User", "UserId1Navigation")
                        .WithMany("UserSpousesUserUserId1Navigations")
                        .HasForeignKey("UserId1")
                        .HasConstraintName("FK_6bbc6de75851eb64e17c07a6a94")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.Entities.User", "UserId2Navigation")
                        .WithMany("UserSpousesUserUserId2Navigations")
                        .HasForeignKey("UserId2")
                        .HasConstraintName("FK_039ee960316593d0e8102ae6c51")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserId1Navigation");

                    b.Navigation("UserId2Navigation");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgClass", b =>
                {
                    b.Navigation("RpgUsers");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgGuild", b =>
                {
                    b.Navigation("RpgGuildRanks");

                    b.Navigation("RpgUsers");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgGuildRank", b =>
                {
                    b.Navigation("RpgUsers");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgItem", b =>
                {
                    b.Navigation("RpgUserItems");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgUser", b =>
                {
                    b.Navigation("RpgBattleChallengedUserNavigation");

                    b.Navigation("RpgBattleChallengerUserNavigation");
                });

            modelBuilder.Entity("Database.Models.Entities.RpgUserItem", b =>
                {
                    b.Navigation("RpgBattleChallengedWeapons");

                    b.Navigation("RpgBattleChallengerWeapons");

                    b.Navigation("RpgUsers");
                });

            modelBuilder.Entity("Database.Models.Entities.User", b =>
                {
                    b.Navigation("RpgUser");

                    b.Navigation("UserCooldown");

                    b.Navigation("UserGameIntegrations");

                    b.Navigation("UserProfile");

                    b.Navigation("UserSpousesUserUserId1Navigations");

                    b.Navigation("UserSpousesUserUserId2Navigations");
                });
#pragma warning restore 612, 618
        }
    }
}
